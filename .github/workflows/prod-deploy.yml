# Dependency Install, Build, Start를 여기서 다합니다.

name: Production Deploy to AWS
on:
  push:
    branches:
      - test_deploy

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    permissions:
      id-token: write
      contents: write

    name: Deploy Application
    runs-on: ubuntu-latest
    outputs:
      deploymentId: ${{ steps.create-deployment.outputs.deploymendId }}
    environment: production

    steps:
      # 레포지토리로 이동합니다.
      - name: Checkout
        uses: actions/checkout@v3
      # https://blog.banksalad.com/tech/github-action-npm-cache/
      - uses: actions/setup-node@v3
        with:
          node-version: 18.16.0
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
      - name: build
        run: npm run build
      # 환경변수를 설치합니다.
      # github repository 안의 ENV_PROD 환경변수 사용
      - name: Install Secret
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
        run: |
          echo "$ENV_PROD"  >> .env
      # AWS CLI를 설치합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # 우선 File 을 압축해서 S3에 업로드합니다.
      # Build time 아끼기 위해서 npm install 은 해당 머신에서 진행합니다.
      - name: zip source code
        if: success()
        run: |
          zip -r server.zip ./
      - name: Upload to S3
        if: success()
        run: |
          aws s3 cp server.zip s3://manito42-codedeploy-main-bucket/server.zip
        #Code Deploy를 사용해 S3 bucket에 소스코드 업로드
      - name: Upload to S3
        if: success()
        run: aws deploy push --application-name manito42-main --description "upload test server file in s3" --s3-location s3://manito42-codedeploy-main-bucket/server.zip --source .

      - name: Create CodeDeploy Deployment
        if: success()
        id: create-deployment
        run: |
          id=$(aws deploy create-deployment \
          --application-name manito42-main \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --output text --deployment-group-name production \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=manito42-codedeploy-main-bucket,bundleType=zip,key=server.zip)
          echo "deploymentId=$id" >> $GITHUB_OUTPUT

      - name: Wait for deployment to finish
        if: success()
        run: |
          echo ${{ steps.create-deployment.outputs.deploymentId }}
          aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment.outputs.deploymentId }}
